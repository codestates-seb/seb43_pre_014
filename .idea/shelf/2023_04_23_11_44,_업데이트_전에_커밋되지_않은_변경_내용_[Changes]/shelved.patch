Index: Server/pre/src/main/java/com/undefined14/pre/board/comment/controller/CommentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.undefined14.pre.board.comment.controller;\n\nimport com.undefined14.pre.auth.jwt.JwtTokenizer;\nimport com.undefined14.pre.board.comment.dto.CommentDto;\nimport com.undefined14.pre.board.comment.entity.Comment;\nimport com.undefined14.pre.board.comment.mapper.CommentMapper;\nimport com.undefined14.pre.board.comment.service.CommentService;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport javax.validation.constraints.Positive;\n\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\n//@CrossOrigin(origins = \"http://localhost:3000\")\n@RestController\n@Validated\n@RequestMapping\n@AllArgsConstructor\n@Slf4j\npublic class CommentController {\n    private final CommentService commentService;\n    private final CommentMapper commentMapper;\n    private final JwtTokenizer jwtTokenizer;\n\n    @PostMapping(\"/questions/{quest-id}/comments\")\n    public ResponseEntity postCommentToQuestion(@RequestHeader(name = \"Authorization\") String token,\n                                                @PathVariable(\"quest-id\") @Positive long questId,\n                                                @Valid @RequestBody CommentDto.Post commentPostDto){\n        Comment comment = commentService.createCommentToQuestion(\n                commentMapper.commentPostDto_to_Comment(commentPostDto),\n                questId,jwtTokenizer.getMemberId(token));\n        CommentDto.Response response = commentMapper.comment_to_CommentResponseDto(comment);\n        return new ResponseEntity<>(\n                response,\n                HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"/answers/{answer-id}/comments\")\n    public ResponseEntity postCommentToAnswer(@RequestHeader(name = \"Authorization\") String token,\n                                              @PathVariable(\"answer-id\") @Positive long questId,\n                                              @Valid @RequestBody CommentDto.Post commentPostDto){\n        Comment comment = commentService.createCommentToAnswer(\n                commentMapper.commentPostDto_to_Comment(commentPostDto),\n                questId,jwtTokenizer.getMemberId(token));\n        CommentDto.Response response = commentMapper.comment_to_CommentResponseDto(comment);\n        return new ResponseEntity<>(\n                response,\n                HttpStatus.CREATED);\n    }\n\n    @PatchMapping(\"/comments/{comment-id}\")\n    public ResponseEntity patchComment(@RequestHeader(name = \"Authorization\") String token,\n                                       @PathVariable(\"comment-id\") @Positive long commentId,\n                                       @Valid @RequestBody CommentDto.Patch commentPatchDto) {\n        commentPatchDto.setCommentId(commentId);\n        Comment comment = commentService.updateComment(\n                commentMapper.commentPatchDto_to_Comment(commentPatchDto),\n                jwtTokenizer.getMemberId(token));\n        CommentDto.Response response = commentMapper.comment_to_CommentResponseDto(comment);\n        return new ResponseEntity<>(\n                response,\n                HttpStatus.OK);\n    }\n\n    @GetMapping(\"/questions/{quest-id}/comments\")\n    public ResponseEntity getCommentFromQuestion(@PathVariable(\"quest-id\") @Positive long questId){\n        List<Comment> comments = commentService.findCommentByQuestionId(questId);\n\n        List<CommentDto.Response> responses = commentMapper.comments_to_CommentResponseDtos(comments);\n\n        return new ResponseEntity<>(responses,\n                HttpStatus.OK);\n    }\n\n    @GetMapping(\"/answers/{answer-id}/comments\")\n    public ResponseEntity getCommentFromAnswer(@PathVariable(\"answer-id\") @Positive long answerId){\n        List<Comment> comments = commentService.findCommentByAnswerId(answerId);\n\n        List<CommentDto.Response> responses = commentMapper.comments_to_CommentResponseDtos(comments);\n\n        return new ResponseEntity<>(responses,\n                HttpStatus.OK);\n    }\n\n    @DeleteMapping(\"/comments/{comment-id}\")\n    public ResponseEntity deleteComment(@RequestHeader(name = \"Authorization\") String token,\n                                        @PathVariable(\"comment-id\") @Positive long commentId){\n        commentService.deleteComment(commentId,jwtTokenizer.getMemberId(token));\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/board/comment/controller/CommentController.java b/Server/pre/src/main/java/com/undefined14/pre/board/comment/controller/CommentController.java
--- a/Server/pre/src/main/java/com/undefined14/pre/board/comment/controller/CommentController.java	(revision 96780dba9d1860f67df91b08f35928d637736a46)
+++ b/Server/pre/src/main/java/com/undefined14/pre/board/comment/controller/CommentController.java	(date 1682217862087)
@@ -17,10 +17,10 @@
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.*;
 
-//@CrossOrigin(origins = "http://localhost:3000")
+@CrossOrigin(origins = "http://localhost:3000")
 @RestController
 @Validated
-@RequestMapping
+@RequestMapping("/board")
 @AllArgsConstructor
 @Slf4j
 public class CommentController {
Index: Server/pre/src/main/java/com/undefined14/pre/exception/ExceptionCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.undefined14.pre.exception;\n\nimport lombok.Getter;\n\npublic enum ExceptionCode {\n    MEMBER_NOT_FOUND(404, \"Member not found\"),\n    MEMBER_EXISTS(409, \"Member already exists\"),\n    MEMBER_DELETED(404, \"Member already deleted\"),\n    MEMBER_FORBIDDEN(403,\"Member Forbidden\"),\n    MEMBER_UNAUTHORIZED(401,\"UNAUTHORIZED\"),\n    COMMENT_NOT_FOUND(404, \"Comment not found\"),;\n\n    @Getter\n    private int status;\n\n    @Getter\n    private String message;\n\n    ExceptionCode(int code, String message) {\n        this.status = code;\n        this.message = message;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/exception/ExceptionCode.java b/Server/pre/src/main/java/com/undefined14/pre/exception/ExceptionCode.java
--- a/Server/pre/src/main/java/com/undefined14/pre/exception/ExceptionCode.java	(revision 96780dba9d1860f67df91b08f35928d637736a46)
+++ b/Server/pre/src/main/java/com/undefined14/pre/exception/ExceptionCode.java	(date 1682217800674)
@@ -8,7 +8,11 @@
     MEMBER_DELETED(404, "Member already deleted"),
     MEMBER_FORBIDDEN(403,"Member Forbidden"),
     MEMBER_UNAUTHORIZED(401,"UNAUTHORIZED"),
-    COMMENT_NOT_FOUND(404, "Comment not found"),;
+    COMMENT_NOT_FOUND(404, "Comment not found"),
+    MEMBER_MISMATCHED(400,"Not Matched Member"),
+    ANSWER_NOT_FOUND(404,"Answer not found"),
+    ANSWER_DELETED(404, "Answer already deleted");
+
 
     @Getter
     private int status;
Index: Server/pre/src/main/java/com/undefined14/pre/board/anwser/controller/AnswerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.undefined14.pre.board.anwser.controller;\n\npublic class AnswerController {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/board/anwser/controller/AnswerController.java b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/controller/AnswerController.java
--- a/Server/pre/src/main/java/com/undefined14/pre/board/anwser/controller/AnswerController.java	(revision 96780dba9d1860f67df91b08f35928d637736a46)
+++ b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/controller/AnswerController.java	(date 1682217800673)
@@ -1,4 +1,69 @@
 package com.undefined14.pre.board.anwser.controller;
 
+import com.undefined14.pre.board.anwser.dto.AnswerDto;
+import com.undefined14.pre.board.anwser.entity.Answer;
+import com.undefined14.pre.board.anwser.mapper.AnswerMapper;
+import com.undefined14.pre.board.anwser.service.AnswerService;
+import lombok.AllArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.constraints.Positive;
+
+@CrossOrigin(origins = "http://localhost:3000") // CORS 정책 허용
+@RestController
+@RequestMapping("/board/answer")
+@Validated
+@AllArgsConstructor
+@Slf4j
 public class AnswerController {
+    private final AnswerMapper mapper;
+    private final AnswerService service;
+
+    // 답변 등록
+    @PostMapping
+    public ResponseEntity postAnswer(@Validated @RequestBody AnswerDto.Post answerPostDto) {
+        log.info(String.valueOf(answerPostDto));
+
+        Answer response = service.createAnswer(mapper.answerPostDtoToAnswer(answerPostDto));
+
+        return new ResponseEntity<>(HttpStatus.CREATED);
+    }
+
+    // 답변 수정
+    @PatchMapping("/{answer-id}")
+    public ResponseEntity patchAnswer(@PathVariable("answer-id") @Positive long answerId,
+                                      @Validated @RequestBody AnswerDto.Patch answerPatchDto) {
+        answerPatchDto.setAnswerId(answerId);
+
+        log.info(String.valueOf(answerPatchDto));
+
+        Answer response = service.updateAnswer(mapper.answerPatchDtoToAnswer(answerPatchDto));
+
+        return new ResponseEntity<>(mapper.answerToAnswerResponseDto(response),HttpStatus.OK);
+    }
+
+    // 답변 조회
+    @GetMapping("/{answer-id}")
+    public ResponseEntity getAnswer(@PathVariable("answer-id") @Positive long answerId) {
+
+        log.info(String.valueOf(answerId));
+
+        Answer response = service.findAnswer(answerId);
+
+        return new ResponseEntity<>(mapper.answerToAnswerResponseDto(response),HttpStatus.OK);
+    }
+
+    // 답변 삭제
+    @DeleteMapping("/{answer-id}")
+    public void deleteAnswer(@PathVariable("answer-id") @Positive long answerId,
+                             @Validated @RequestBody AnswerDto.Delete delete) {
+
+        log.info(String.valueOf(answerId));
+
+        service.deleteAnswer(mapper.answerDeleteDtoToAnswer(delete),answerId);
+    }
 }
Index: Server/pre/src/main/java/com/undefined14/pre/board/anwser/mapper/AnswerMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/board/anwser/mapper/AnswerMapper.java b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/mapper/AnswerMapper.java
new file mode 100644
--- /dev/null	(date 1682217800673)
+++ b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/mapper/AnswerMapper.java	(date 1682217800673)
@@ -0,0 +1,24 @@
+package com.undefined14.pre.board.anwser.mapper;
+
+import com.undefined14.pre.board.anwser.dto.AnswerDto;
+import com.undefined14.pre.board.anwser.entity.Answer;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.ReportingPolicy;
+
+@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
+public interface AnswerMapper {
+
+    @Mapping(source = "memberId", target = "member.memberId")
+    Answer answerPostDtoToAnswer(AnswerDto.Post answerPostDto);
+
+    @Mapping(source = "memberId", target = "member.memberId")
+    Answer answerPatchDtoToAnswer(AnswerDto.Patch answerPatchDto);
+
+    @Mapping(source = "memberId", target = "member.memberId")
+    Answer answerDeleteDtoToAnswer(AnswerDto.Delete answerDeleteDto);
+
+    @Mapping(source = "answerStatus.status", target = "answerStatus")
+    @Mapping(source = "member.memberId", target = "memberId")
+    AnswerDto.Response answerToAnswerResponseDto(Answer answer);
+}
Index: Server/pre/src/main/java/com/undefined14/pre/board/anwser/service/AnswerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/board/anwser/service/AnswerService.java b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/service/AnswerService.java
new file mode 100644
--- /dev/null	(date 1682217800674)
+++ b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/service/AnswerService.java	(date 1682217800674)
@@ -0,0 +1,73 @@
+package com.undefined14.pre.board.anwser.service;
+
+import com.undefined14.pre.board.anwser.entity.Answer;
+import com.undefined14.pre.board.anwser.repository.AnswerRepository;
+import com.undefined14.pre.exception.BusinessLogicException;
+import com.undefined14.pre.exception.ExceptionCode;
+import lombok.AllArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Service;
+
+import java.util.Optional;
+
+@Service
+@AllArgsConstructor
+@Slf4j
+public class AnswerService {
+    private AnswerRepository repository;
+
+    // 답변 등록
+    public Answer createAnswer(Answer answer) {
+        return repository.save(answer);
+    }
+
+    // 답변 수정
+    public Answer updateAnswer(Answer answer) {
+
+        Answer findAnswer = findVerfiedAnswer(answer.getAnswerId());
+
+        verifiedRequest(answer.getMember().getMemberId(),findAnswer.getMember().getMemberId());
+
+        Optional.ofNullable(answer.getBody())
+                .ifPresent(findAnswer::setBody);
+
+        return repository.save(findAnswer);
+    }
+
+    // 답변 조회
+    public Answer findAnswer(long answerId) {
+        Answer findAnswer = findVerfiedAnswer(answerId);
+
+        if (findAnswer.getAnswerStatus().equals(Answer.AnswerStatus.ANSWER_DELETED)) {
+            throw new BusinessLogicException(ExceptionCode.ANSWER_DELETED);
+        }
+
+        return findAnswer;
+    }
+
+    // 답변 삭제
+    public void deleteAnswer(Answer answer, long answerId) {
+        Answer findAnswer = findVerfiedAnswer(answerId);
+
+        verifiedRequest(answer.getMember().getMemberId(),findAnswer.getMember().getMemberId());
+
+        findAnswer.setAnswerStatus(Answer.AnswerStatus.ANSWER_DELETED);
+
+        repository.save(findAnswer);
+    }
+
+    // DB 에서 답변 가져옴
+    private Answer findVerfiedAnswer(long answerId) {
+        Optional<Answer> optionalAnswer =
+                repository.findById(answerId);
+        return optionalAnswer.orElseThrow(() ->
+                new BusinessLogicException(ExceptionCode.ANSWER_NOT_FOUND));
+    }
+
+    // 작성한 회원과 요청한 회원의 id가 같은지 검증 (수정과 삭제 시 사용해야함)
+    private void verifiedRequest(long memberId, long answerMemberId) {
+        if (memberId != answerMemberId) {
+            throw new BusinessLogicException(ExceptionCode.MEMBER_MISMATCHED);
+        }
+    }
+}
Index: Server/pre/src/main/java/com/undefined14/pre/board/anwser/entity/Answer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/board/anwser/entity/Answer.java b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/entity/Answer.java
new file mode 100644
--- /dev/null	(date 1682217800673)
+++ b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/entity/Answer.java	(date 1682217800673)
@@ -0,0 +1,41 @@
+package com.undefined14.pre.board.anwser.entity;
+
+import com.undefined14.pre.audit.Auditable;
+import com.undefined14.pre.member.entity.Member;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+import javax.persistence.*;
+
+@NoArgsConstructor
+@Getter
+@Setter
+@Entity
+public class Answer extends Auditable {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private Long answerId;
+
+    @Column(nullable = false, length = 255)
+    private String body;
+
+    @Enumerated(EnumType.STRING)
+    @Column(length = 30, nullable = false)
+    private AnswerStatus answerStatus = AnswerStatus.ANSWER_POSTED;
+
+    @AllArgsConstructor
+    public enum AnswerStatus {
+        ANSWER_POSTED("등록된 답변"),
+        ANSWER_DELETED("삭제된 답변");
+
+        @Getter
+        private String status;
+    }
+
+    @ManyToOne
+    @JoinColumn(name = "MEMBER_ID")
+    private Member member;
+}
Index: Server/pre/src/main/java/com/undefined14/pre/board/anwser/dto/AnswerDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/board/anwser/dto/AnswerDto.java b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/dto/AnswerDto.java
new file mode 100644
--- /dev/null	(date 1682217800673)
+++ b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/dto/AnswerDto.java	(date 1682217800673)
@@ -0,0 +1,38 @@
+package com.undefined14.pre.board.anwser.dto;
+
+import com.undefined14.pre.board.anwser.entity.Answer;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+import javax.validation.constraints.NotNull;
+
+public class AnswerDto {
+    @Getter
+    public static class Post {
+        @NotNull
+        private Long memberId;
+        @NotNull
+        private String body;
+    }
+    @Getter
+    public static class Patch {
+        @NotNull
+        private Long memberId;
+        @Setter
+        private Long answerId;
+        private String body;
+    }
+    @Getter
+    @Builder
+    public static class Response {
+        private Long memberId;
+        private Long answerId;
+        private String body;
+        private String answerStatus;
+    }
+    @Getter
+    public static class Delete {
+        private Long memberId;
+    }
+}
Index: Server/pre/src/main/java/com/undefined14/pre/board/anwser/repository/AnswerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/pre/src/main/java/com/undefined14/pre/board/anwser/repository/AnswerRepository.java b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/repository/AnswerRepository.java
new file mode 100644
--- /dev/null	(date 1682217800674)
+++ b/Server/pre/src/main/java/com/undefined14/pre/board/anwser/repository/AnswerRepository.java	(date 1682217800674)
@@ -0,0 +1,7 @@
+package com.undefined14.pre.board.anwser.repository;
+
+import com.undefined14.pre.board.anwser.entity.Answer;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface AnswerRepository extends JpaRepository<Answer, Long> {
+}
